name: Check Mergability

on:
  issue_comment:
    types: [created, edited]

jobs:
  check-whitelist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Install Dependencies
        run: npm install yaml

      - name: Get PR author's email
        id: pr_author_email
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            const user = await github.rest.users.getByUsername({
              username: pr.data.user.login
            });
            let email = user.data.email ;
            return email;
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if author is whitelisted
        id: check
        run: node scripts/check-whitelist.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_AUTHOR_EMAIL: ${{ steps.pr_author_email.outputs.email }}
  check-merge-ability:
    if: steps.check.outputs.is_whitelisted == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Check PR Comment
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            (async () => {
              const comment = context.payload.comment.body;
              const commentAuthor = context.payload.comment.user.login;

              let state = 'success';
              let description = 'The PR can be merged.';

              const issue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });

              if (!issue.data.pull_request) {
                console.log('The comment is not on a pull request.');
                return;
              }

              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
              }).catch(err => {
                console.log('Error getting pull request:', err);
              });

              const prAuthor = pr.data.user.login;

              if (commentAuthor !== prAuthor) {
                state = 'failure';
                description = 'PR cannot be merged until the acknowledgment is present in the comment from the PR author.';
              } else if (!comment.includes('I acknowledge the instructions.')) {
                state = 'failure';
                description = 'PR cannot be merged until the acknowledgment is present in the comment.';
              }

              let result = await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: pr.data.head.sha,
                state: state,
                description: description,
                context: 'Check Mergability',
              }).catch(err => {
                console.log('Error creating commit status:', err);
              });
              console.log('Commit status created:', result);
            })();
      - name: Install yq
        run: |
          sudo add-apt-repository ppa:rmescandon/yq
          sudo apt update
          sudo apt install yq -y
      - name: Update email whitelist
        if: steps.check.outputs.is_whitelisted == 'false' && steps.check_pr_comment.outputs.state == 'success'
        run: |
          # Parse the email-whitelist.yml file
          whitelist=$(yq e . email-whitelist.yml)

          # Add the PR author's email to the individual_accounts list
          whitelist.individual_accounts+=[{email: '${{ steps.pr_author.outputs.email }}', prNumber: '${{ github.event.pull_request.number }}', commentNumber: '${{ github.event.comment.id }}', timestamp: '${{ github.event.comment.created_at }}'}]

          # Write the updated whitelist back to the email-whitelist.yml file
          echo "$whitelist" | yq e -P > email-whitelist.yml

          # Configure git
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

          # Commit the changes
          git add email-whitelist.yml
          git commit -m 'Update email whitelist'
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Report success
        if: steps.check.outputs.is_whitelisted == 'true'
        run: echo "PR author is whitelisted, skipping check merge."
